
""" Contains methods for accessing the API Endpoints """

from typing import Any, Dict, List, Optional, Union, cast

import requests
import attr

{% for endpoint in endpoints %}
{% for relative in endpoint.relative_imports %}
{{ relative }}
{% endfor %}

{% endfor %}
from ..client import Client
from ..types import Response, UNSET{% if endpoints|selectattr("multipart_body_class")|list|length %}, File {% endif %}

{% from "endpoint_macros.py.jinja" import header_params, cookie_params, query_params, json_body, client, parse_response %}
{% from "endpoint_init_macros.py.jinja" import arguments, kwargs %}

@attr.s(auto_attribs=True)
class {{ utils.pascal_case(tag) }}Endpoints:

    client: Client

{% for endpoint in endpoints %}

{% set return_string = endpoint.response_type() %}
{% set parsed_responses = (endpoint.responses | length > 0) and return_string != "None" %}
{% set endpoint_name = utils.snake_case(endpoint.name)%}

    def {{ endpoint_name }}(
        self,
        {{ arguments(endpoint) | indent(8) }}
) -> Response[{{ return_string }}]:
        {% if endpoint.description %}
        """
            {{ endpoint.description }}
        """
        {% elif endpoint.summary %}
        """
            {{ endpoint.summary  }}
        """
        {% endif %}

        url = "{}{{ endpoint.path }}".format(
            self.client.base_url
            {%- for parameter in endpoint.path_parameters -%}
            ,{{parameter.name}}={{parameter.python_name}}
            {%- endfor -%}
        )

        headers: Dict[str, Any] = self.client.get_headers()
        cookies: Dict[str, Any] = self.client.get_cookies()

        {{ header_params(endpoint) | indent(8) }}

        {{ cookie_params(endpoint) | indent(8) }}

        {{ query_params(endpoint) | indent(8) }}

        {% if endpoint.json_body %}
        {{ json_body(endpoint) | indent(8) }}
        {% endif %}

        {% if endpoint.multipart_body_class %}
        files = {}
        data = {}
        for key, value in multipart_data.to_dict().items():
             if isinstance(value, File):
                 files[key] = value
             else:
                 data[key] = value
        {% endif %}

        response = requests.{{ endpoint.method }}(
            url=url,
            headers=headers,
            cookies=cookies,
            timeout=self.client.get_timeout(),
            verify=self.client.verify,
            {% if endpoint.json_body %}
            json={{ "json_" + endpoint.json_body.python_name }},
            {% elif endpoint.form_body_class %}
            data=asdict(form_data),
            {% elif endpoint.multipart_body_class %}
            files=files,
            data=data,
            {% endif %}
            {% if endpoint.query_parameters %}
            params=params,
            {% endif %}
        )

        {% if parsed_responses %}
        parsed_response = None
        {% for response in endpoint.responses %}
        if response.status_code == {{ response.status_code }}:
            {% if response.prop.template %}
                {% from "property_templates/" + response.prop.template import construct %}
            {{ construct(response.prop, response.source) | indent(12) }}
            {% else %}
            {{ response.prop.python_name }} = {{ response.source }}

            {% endif %}
        {% endfor %}
        {% endif %}

        return Response(
            status_code=response.status_code,
            content=response.content,
            headers=response.headers,
            request=response.request,
            {% if parsed_responses %}
            parsed=parsed_response,
            {% else %}
            parsed=None,
            {% endif %}
    )
{% endfor %}
